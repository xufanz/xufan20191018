<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>栩凡的博客</title>
  
  <subtitle>人类的本质都是复读机</subtitle>
  <link href="/xufanz.github.io/atom.xml" rel="self"/>
  
  <link href="https://xufanz.github.io/"/>
  <updated>2019-10-30T01:21:47.538Z</updated>
  <id>https://xufanz.github.io/</id>
  
  <author>
    <name>zhang yangyang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python学习第二课</title>
    <link href="https://xufanz.github.io/2019/10/25/my-third-blog/"/>
    <id>https://xufanz.github.io/2019/10/25/my-third-blog/</id>
    <published>2019-10-25T12:57:43.000Z</published>
    <updated>2019-10-30T01:21:47.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-第五节Python数值类型"><a href="#1-第五节Python数值类型" class="headerlink" title="1.第五节Python数值类型"></a>1.第五节Python数值类型</h1><p>整型：整数（长整型）</p><a id="more"></a><p>布尔类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">true\false</span><br><span class="line"></span><br><span class="line">1,0</span><br><span class="line"></span><br><span class="line">1+0=1</span><br><span class="line"></span><br><span class="line">1*0=0</span><br></pre></td></tr></table></figure><p>浮点型：小数</p><p>e记法（科学计数法）</p><p>1.55e10</p><p>=15500000000</p><h2 id="4-1类型转换"><a href="#4-1类型转换" class="headerlink" title="4.1类型转换"></a>4.1类型转换</h2><p><code>int（）</code>可以将浮点数、字符串转换为整数.（转换浮点数的时候，去掉小数）</p><p><code>float()</code>可以将整数、字符串转换为浮点数</p><p><code>str()</code>可以将数或任意其他类型转换为字符串</p><h2 id="4-2获取变量类型"><a href="#4-2获取变量类型" class="headerlink" title="4.2获取变量类型"></a>4.2获取变量类型</h2><p><code>type（）</code>获取变量类型</p><p><code>isinstance(a,str)</code>———-输出布尔类型</p><h2 id="4-3问题"><a href="#4-3问题" class="headerlink" title="4.3问题"></a>4.3问题</h2><p><strong>0. 在 Python 中，int 表示整型，那你还记得 bool、float 和 str 分别表示什么吗？</strong></p><p> bool 表示布尔类型<br> float 表示浮点型<br> str 表示字符串</p><p> <strong>1.</strong> <strong>你知道为什么布尔类型(bool)的 True 和 False 分别用 1 和 0 来代替吗？</strong></p><p> 你可能听说过计算机是很“笨”的，究其根本是因为它只认识二进制数，所以所有的编程语言最终都会转换成简单的二进制序列给CPU按照一定的规则解析。<br> 由于二进制只有两个数：0 和 1，因此用 0 和 1 来表示 False 和 True 再适合不过了，因为不用浪费资源在转换的过程上！</p><p> <strong>2.</strong> <strong>使用 int() 将小数转换为整数，结果是向上取整还是向下取整呢？</strong></p><p> 我们可爱的小甲鱼说了，小数取整会采用比较暴力的截断方式，即向下取整。（注：5.5向上取整为6，向下取整为5）</p><p> <strong>3.</strong> <strong>我们人类思维是习惯于“四舍五入”法，你有什么办法使得 int() 按照“四舍五入”的方式取整吗？</strong></p><p> int() 固然没那么“聪明”，但机器是死的，鱼油是活的！<br> 5.4 “四舍五入”结果为：5，int(5.4+0.5) == 5<br> 5.6 “四舍五入”结果为：6，int(5.6+0.5) == 6</p><p> <strong>4.</strong> <strong>取得一个变量的类型，视频中介绍可以使用 type() 和 isinstance()，你更倾向于使用哪个？</strong></p><p> 建议使用 isinstance()，因为它的返回结果比较直接，另外 type() 其实并没有你想象的那么简单，我们后边会讲到。</p><p> <strong>5. Python3</strong> <strong>可以给变量命名中文名，知道为什么吗？</strong></p><p> Pyhton3 源码文件默认使用utf-8编码（支持中文），这就使得以下代码是合法的：<br> &gt;&gt;&gt; 小甲鱼 = ‘我爱你’<br> &gt;&gt;&gt; print(小甲鱼)<br> &gt;&gt;&gt; 我爱你</p><p><strong>0.</strong> <strong>针对视频中小甲鱼提到的小漏洞，再次改进我们的小游戏：当用户输入错误类型的时候，及时提醒用户重新输入，防止程序崩溃。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">\1. import random</span><br><span class="line"></span><br><span class="line">\2. times = 3</span><br><span class="line"></span><br><span class="line">\3. secret = random.randint(1,10)</span><br><span class="line"></span><br><span class="line">\4. print(&apos;------------------我爱鱼C工作室------------------&apos;)</span><br><span class="line"></span><br><span class="line">\5. guess = 0</span><br><span class="line"></span><br><span class="line">\6. print(&quot;不妨猜一下小甲鱼现在心里想的是哪个数字：&quot;, end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">\7. while (guess != secret) and (times &gt; 0):</span><br><span class="line"></span><br><span class="line">\8.   temp = input()</span><br><span class="line"></span><br><span class="line">\9.   while not temp.isdigit():</span><br><span class="line"></span><br><span class="line">\10.      temp = input(&quot;抱歉，您的输入有误，请输入一个整数：&quot;)</span><br><span class="line"></span><br><span class="line">\11.   guess = int(temp)</span><br><span class="line"></span><br><span class="line">\12.   times = times - 1 # 用户每输入一次，可用机会就-1</span><br><span class="line"></span><br><span class="line">\13.   if guess == secret:</span><br><span class="line"></span><br><span class="line">\14.      print(&quot;我草，你是小甲鱼心里的蛔虫吗？！&quot;)</span><br><span class="line"></span><br><span class="line">\15.      print(&quot;哼，猜中了也没有奖励！&quot;)</span><br><span class="line"></span><br><span class="line">\16.   else:</span><br><span class="line"></span><br><span class="line">\17.      if guess &gt; secret:</span><br><span class="line"></span><br><span class="line">\18.        print(&quot;哥，大了大了~~~&quot;)</span><br><span class="line"></span><br><span class="line">\19.      else:</span><br><span class="line"></span><br><span class="line">\20.        print(&quot;嘿，小了，小了~~~&quot;)</span><br><span class="line"></span><br><span class="line">\21.      if times &gt; 0:</span><br><span class="line"></span><br><span class="line">\22.        print(&quot;再试一次吧：&quot;, end=&quot; &quot;)</span><br><span class="line"></span><br><span class="line">\23.      else:</span><br><span class="line"></span><br><span class="line">\24.        print(&quot;机会用光咯T_T&quot;)</span><br><span class="line"></span><br><span class="line">\25. print(&quot;游戏结束，不玩啦^_^&quot;)</span><br></pre></td></tr></table></figure><p>** <strong>1.</strong> <strong>写一个程序，判断给定年份是否为闰年。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">\1. temp = input(&apos;请输入一个年份：&apos;)</span><br><span class="line"></span><br><span class="line">\2. while not temp.isdigit():</span><br><span class="line"></span><br><span class="line">\3.   temp = input(&quot;抱歉，您的输入有误，请输入一个整数：&quot;)</span><br><span class="line"></span><br><span class="line">\4.  </span><br><span class="line"></span><br><span class="line">\5. year = int(temp)</span><br><span class="line"></span><br><span class="line">\6. if year/400 == int(year/400):</span><br><span class="line"></span><br><span class="line">\7.   print(temp + &apos; 是闰年！&apos;)</span><br><span class="line"></span><br><span class="line">\8. else:</span><br><span class="line"></span><br><span class="line">\9.   if (year/4 == int(year/4)) and (year/100 != int(year/100)):</span><br><span class="line"></span><br><span class="line">\10.      print(temp + &apos; 是闰年！&apos;)</span><br><span class="line"></span><br><span class="line">\11.   else:</span><br><span class="line"></span><br><span class="line">\12.      print(temp + &apos; 不是闰年！&apos;)</span><br></pre></td></tr></table></figure><h1 id="2-第六节常用操作符"><a href="#2-第六节常用操作符" class="headerlink" title="2.第六节常用操作符"></a>2.第六节常用操作符</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">+加    </span><br><span class="line"></span><br><span class="line"> a=5</span><br><span class="line"></span><br><span class="line">a +=3</span><br><span class="line"></span><br><span class="line">a=8</span><br><span class="line"></span><br><span class="line">-减</span><br><span class="line"></span><br><span class="line">*乘</span><br><span class="line"></span><br><span class="line">/除</span><br><span class="line"></span><br><span class="line">%          求余数   5%2=1</span><br><span class="line"></span><br><span class="line">**        幂运算2**3=8</span><br><span class="line"></span><br><span class="line">//      整除符号10//8=1</span><br></pre></td></tr></table></figure><h2 id="1-优先级问题"><a href="#1-优先级问题" class="headerlink" title="1.优先级问题"></a>1.优先级问题</h2><p>多个运算符出现在一个式子里，考虑优先级问题</p><p>例：  -3*2+5/-2-4=-12.5</p><p>先乘除后加减</p><p>加括号</p><p>-3 ** 2 =-9</p><p>3 ** -2=1/9</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">幂运算----------------**</span><br><span class="line">正负号-----------+   -</span><br><span class="line">算术操作符*  /  //  +  -</span><br><span class="line">比较操作符&lt; &gt; &lt;= &gt;= !=</span><br><span class="line">逻辑运算符not and or</span><br></pre></td></tr></table></figure><h2 id="2-比较操作符和逻辑操作符"><a href="#2-比较操作符和逻辑操作符" class="headerlink" title="2.比较操作符和逻辑操作符"></a>2.比较操作符和逻辑操作符</h2><p>二元操作符  ：and     or</p><p>一元操作符：   not   ——–针对布尔类型值</p><h2 id="3-问题"><a href="#3-问题" class="headerlink" title="3.问题"></a>3.问题</h2><p><strong>0. Python 的 floor 除法现在使用 “//” 实现，那 3.0 // 2.0 您目测会显示什么内容呢？</strong></p><p> 如果回答是 1.5 那么很遗憾，您受到 C 语言的影响比较大，Python 这里会义无反顾地执行 floor 除法原则，答案是：1.0</p><p> <strong>1. a &lt; b &lt; c</strong> <strong>事实上是等于？</strong></p><p> (a &lt; b) and (b &lt; c)</p><p> <strong>2.</strong> <strong>不使用 IDLE，你可以轻松说出 5 \</strong> -2 的值吗？**</p><p> 0.04，也就是 1/25</p><p> 幂运算操作符比其左侧的一元操作符优先级高，比其右侧的一元操作符优先级低。</p><p> <strong>3.</strong> <strong>如何简单判断一个数是奇数还是偶数？</strong></p><p> 使用求余可以简单得到答案：能被 2 整除为偶数，所以 x % 2 == 0，否则为奇数。</p><p> <strong>4.</strong> <strong>请用最快速度说出答案：not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9</strong></p><p> 如果你的回答是 0，那么小甲鱼很开心你中招了！<br> 答案是：4</p><p> not or and 的优先级是不同的：not &gt; and &gt; or</p><p> 我们按照优先级给它们加上括号：(not 1) or (0 and 1) or (3 and 4) or (5 and 6) or (7 and 8 and 9)<br> == 0 or 0 or 4 or 6 or 9<br> == 4</p><p> 为啥是 4？</p><p> 大家还记得第四讲作业提到的“短路逻辑”吗？3 and 4 == 4，而 3 or 4 == 3。<br> 所以答案是：4</p><p> <strong>5.</strong> <strong>还记得我们上节课那个求闰年的作业吗？如果还没有学到“求余”操作，还记得用什么方法可以“委曲求全”代替“%”的功能呢？</strong></p><p> 因为上节课我们还没有教大家“求余”的操作，所以小甲鱼使用了“if year/400 == int(year/400)”这样的方式来“委曲求全”。</p><p><strong>0.</strong> <strong>请写一个程序打印出</strong> <strong>0~100</strong> <strong>所有的奇数。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\1. i = 0</span><br><span class="line"></span><br><span class="line">\2. while i &lt;= 100:</span><br><span class="line"></span><br><span class="line">\3.   if i % 2 != 0:</span><br><span class="line"></span><br><span class="line">\4.      print(i, end=&apos; &apos;)</span><br><span class="line"></span><br><span class="line">\5.      i += 1</span><br><span class="line"></span><br><span class="line">\6.   else:</span><br><span class="line"></span><br><span class="line">\7.      i += 1</span><br></pre></td></tr></table></figure><p>** <strong>1.</strong> <strong>我们说过现在的</strong> <strong>Python</strong> <strong>可以计算很大很大的数据，但是**</strong>……<strong>**真正的大数据计算可是要靠刚刚的硬件滴，不妨写一个小代码，让你的计算机为之崩溃？</strong></p><p> print(2 ** 2 ** 32)<br> # 一般很多机子都会在一会儿之后：Memory Overflow，内存不够用。<br> # 设计到幂操作，结果都是惊人滴。</p><p> <strong>2.</strong> <strong>题目：请编程求解该阶梯至少有多少阶？</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">\1. x = 7</span><br><span class="line"></span><br><span class="line">\2. i = 1</span><br><span class="line"></span><br><span class="line">\3. flag = 0</span><br><span class="line"></span><br><span class="line">\4.  </span><br><span class="line"></span><br><span class="line">\5. while i &lt;= 100:</span><br><span class="line"></span><br><span class="line">\6.   if (x%2 == 1) and (x%3 == 2) and (x%5 == 4) and (x%6==5):</span><br><span class="line"></span><br><span class="line">\7.      flag = 1</span><br><span class="line"></span><br><span class="line">\8.   else:</span><br><span class="line"></span><br><span class="line">\9.      x = 7 * (i+1) # 根据题意，x一定是7的整数倍，所以每次乘以7</span><br><span class="line"></span><br><span class="line">\10.   i += 1</span><br><span class="line"></span><br><span class="line">\11.  </span><br><span class="line"></span><br><span class="line">\12. if flag == 1:</span><br><span class="line"></span><br><span class="line">\13.   print(&apos;阶梯数是：&apos;, x)</span><br><span class="line"></span><br><span class="line">\14. else:</span><br><span class="line"></span><br><span class="line">\15.   print(&apos;在程序限定的范围内找不到答案！&apos;)</span><br></pre></td></tr></table></figure><h1 id="3-第七节分支与循环"><a href="#3-第七节分支与循环" class="headerlink" title="3.第七节分支与循环"></a>3.第七节分支与循环</h1><p><code>elif-----------else if</code></p><p>三元操作符     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if x &lt; y:</span><br><span class="line">small =x</span><br><span class="line">else:</span><br><span class="line">small=y</span><br><span class="line"></span><br><span class="line">使用三元操作符</span><br><span class="line">small = x if x &lt; y else y</span><br></pre></td></tr></table></figure><p>断言————-自爆程序    用于测试程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">assert 3 &gt;4</span><br><span class="line"></span><br><span class="line">条件为假的时候，自爆出AssertionError</span><br></pre></td></tr></table></figure><h2 id="1-循环"><a href="#1-循环" class="headerlink" title="1.循环"></a>1.循环</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">while 条件：</span><br><span class="line"></span><br><span class="line">​循环体</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for循环</span><br><span class="line"></span><br><span class="line">语法</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for 目标 in 表达式：</span><br><span class="line"></span><br><span class="line">​循环体</span><br></pre></td></tr></table></figure><p>range()</p><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">range语法</span><br><span class="line">range（[start] stop[, step=1]）</span><br><span class="line">step=1                步长为1</span><br><span class="line">作用：生成一个从start参数值到stop参数值结束的数字序列</span><br><span class="line">例子：</span><br><span class="line">list(range(5))</span><br><span class="line">[0,1,2,3,4]</span><br><span class="line"></span><br><span class="line">for i in range(3.8):</span><br><span class="line">print(i)</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="2-关键的语句"><a href="#2-关键的语句" class="headerlink" title="2.关键的语句"></a>2.关键的语句</h2><p>break————终止循环跳出循环体</p><p>continue———终止本轮循环，开始下一轮循环</p><ul><li>注意：如果条件为真，则执行下一轮循环，否则跳出循环</li></ul><h2 id="3-问题-1"><a href="#3-问题-1" class="headerlink" title="3.问题"></a>3.问题</h2><p><strong>0. if not (money &lt; 100): 这行代码相当于？</strong></p><p> if money &gt;= 100:</p><p> <strong>1. assert</strong> <strong>的作用是什么？</strong></p><p> assert这个关键字我们称之为“断言”，当这个关键字后边的条件为假的时候，程序自动崩溃并抛出AssertionError的异常。<br> 什么情况下我们会需要这样的代码呢？当我们在测试程序的时候就很好用，因为与其让错误的条件导致程序今后莫名其妙地崩溃，不如在错误条件出现的那一瞬间我们实现“自爆”。<br> 一般来说我们可以用Ta再程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert关键字就非常有用了。</p><p> <strong>2.</strong> <strong>假设有 x = 1，y = 2，z = 3，请问如何快速将三个变量的值互相交换？</strong></p><p> x, y, z = z, y, x</p><p> <strong>3.</strong> <strong>猜猜 (x &lt; y and [x] or [y])[0] 实现什么样的功能？</strong></p><p> 这其实是 Python 的作者还没有为 Python 加入三元操作符之前，Python 社区的小伙伴们灵活的使用 and 和 or 搭配来实现三元操作符的功能，这里边有涉及到列表和切片的知识，这部分知识很快就会讲解，迫不及待的朋友可以先稍微预习下。</p><p> <strong>4.</strong> <strong>你听说过成员资格运算符吗？</strong></p><p> Python 有一个成员资格运算符：in，用于检查一个值是否在序列中，如果在序列中返回 True，否则返回 False。</p><p> 例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">\1. &gt;&gt;&gt; name = &apos;小甲鱼&apos;</span><br><span class="line"></span><br><span class="line">\2. &gt;&gt;&gt; &apos;鱼&apos; in name</span><br><span class="line"></span><br><span class="line">\3. True</span><br><span class="line"></span><br><span class="line">\4. &gt;&gt;&gt; &apos;肥鱼&apos; in name</span><br><span class="line"></span><br><span class="line">\5. False</span><br></pre></td></tr></table></figure><p><strong>0.</strong> <strong>视频中小甲鱼使用</strong> <strong>if elif else</strong> <strong>在大多数情况下效率要比全部使用</strong> <strong>if</strong> <strong>要高，但根据一般的统计规律，一个班的成绩一般服从正态分布，也就是说平均成绩一般集中在</strong> <strong>70~80</strong> <strong>分之间，因此根据统计规律，我们还可以改进下程序以提高效率。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\1. score = int(input(&apos;请输入一个分数：&apos;))</span><br><span class="line"></span><br><span class="line">\2. if 80 &gt; score &gt;= 60:</span><br><span class="line"></span><br><span class="line">\3.   print(&apos;C&apos;)</span><br><span class="line"></span><br><span class="line">\4. elif 90 &gt; score &gt;= 80:</span><br><span class="line"></span><br><span class="line">\5.   print(&apos;B&apos;)</span><br><span class="line"></span><br><span class="line">\6. elif 60 &gt; score &gt;= 0:</span><br><span class="line"></span><br><span class="line">\7.   print(&apos;D&apos;)</span><br><span class="line"></span><br><span class="line">\8. elif 100 &gt;= score &gt;= 90:</span><br><span class="line"></span><br><span class="line">\9.   print(&apos;A&apos;)</span><br><span class="line"></span><br><span class="line">\10. else:</span><br><span class="line"></span><br><span class="line">\11.   print(&apos;输入错误！&apos;)</span><br></pre></td></tr></table></figure><p>** <strong>1. Python</strong> <strong>的作者在很长一段时间不肯加入三元操作符就是怕跟**</strong>C<strong>**语言一样搞出国际乱码大赛，蛋疼的复杂度让初学者望而生畏，不过，如果你一旦搞清楚了三元操作符的使用技巧，或许一些比较复杂的问题反而迎刃而解。</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\1. small = x if (x &lt; y and x &lt; z) else (y if y &lt; z else z)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-第五节Python数值类型&quot;&gt;&lt;a href=&quot;#1-第五节Python数值类型&quot; class=&quot;headerlink&quot; title=&quot;1.第五节Python数值类型&quot;&gt;&lt;/a&gt;1.第五节Python数值类型&lt;/h1&gt;&lt;p&gt;整型：整数（长整型）&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python学习" scheme="https://xufanz.github.io/tags/Python%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>python学习第一课</title>
    <link href="https://xufanz.github.io/2019/10/23/my-second-blog/"/>
    <id>https://xufanz.github.io/2019/10/23/my-second-blog/</id>
    <published>2019-10-23T13:33:16.000Z</published>
    <updated>2019-10-26T13:54:20.775Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Python是脚本语言</strong>，脚本语言(Scripting language)是电脑编程语言，因此也能让开发者藉以编写出让电脑听命行事的程序。以简单的方式快速完成某些复杂的事情通常是创造脚本语言的重要原则，基于这项原则，使得脚本语言通常比 C语言、C++语言 或 Java 之类的系统编程语言要简单容易。</p><h1 id="0-第一节"><a href="#0-第一节" class="headerlink" title="0.第一节"></a>0.第一节</h1><p>Alt +N  上一条语句</p><p>Alt+P     下一条语句</p><a id="more"></a><p>print(“输入文字”)      \输出</p><p>print语法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"well water"</span> + <span class="string">" river"</span>)</span><br><span class="line">well water river</span><br><span class="line">print(<span class="string">"tgshg"</span>*<span class="number">8</span>)</span><br><span class="line">输出<span class="number">8</span>遍tgshg tgshg tgshg tgshg tgshg tgshg tgshg tgshg tgshg</span><br></pre></td></tr></table></figure><p>转页符  <code>\</code>      \实现换行功能</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a><strong>问题</strong></h2><p><strong>1.IDLE 是什么？</strong></p><p> IDLE是一个Python Shell，shell的意思就是“外壳”，基本上来说，就是一个通过键入文本与程序交互的途径！像我们Windows那个cmd窗口，像Linux那个黑乎乎的命令窗口，他们都是shell，利用他们，我们就可以给操作系统下达命令。同样的，我们可以利用IDLE这个shell与Python进行互动。</p><p> <strong>2. print() 的作用是什么？</strong></p><p> print() 会在输出窗口中显示一些文本（在这一讲中，输出窗口就是IDLE shell窗口）。</p><p> <strong>3. Python 中表示乘法的符号是什么？</strong></p><p> Python中的乘号是*（星号）。</p><p> <strong>4. 为什么 &gt;&gt;&gt;print(‘I love fishc.com ‘ * 5) 可以正常执行，但 &gt;&gt;&gt;print(‘I love fishc.com ‘ + 5) 却报错？</strong></p><p> 在 Python 中不能把两个完全不同的东西加在一起，比如说数字和文本，正是这个原因，&gt;&gt;&gt;print(‘I love fishc.com ‘ + 5) 才会报错。这就像是在说“五只小甲鱼加上苍井空会是多少？”一样没有多大意义，结果可能是五，可能是六，也可能是八！不过乘以一个整数来翻倍就具有一定的意义了，前边的例子就是将 “I love fishc.com” 这个字符串打印五次。</p><p> <strong>5. 如果我需要在一个字符串中嵌入一个双引号，正确的做法是？</strong></p><p> 你有两个选择：可以利用反斜杠（\）对双引号转义<code>:\&quot;</code>，或者用单引号引起这个字符串。例如：’ I l”o”ve fishc.com ‘。</p><h1 id="1-第二节"><a href="#1-第二节" class="headerlink" title="1.第二节"></a>1.第二节</h1><h2 id="1-1BIF（内置函数）"><a href="#1-1BIF（内置函数）" class="headerlink" title="1.1BIF（内置函数）"></a>1.1BIF（内置函数）</h2><p>print</p><p>int————将输入的变量变为一个整型</p><p>输入<code>dir(_builtins_)</code>调出所有内置函数</p><p><code>help(input)</code>———-看内置函数的用处和用法</p><h2 id="1-2"><a href="#1-2" class="headerlink" title="1.2"></a>1.2</h2><p><strong>2.</strong> <strong>在</strong> <strong>Python</strong> <strong>看来：**</strong>‘FishC’** <strong>和</strong> <strong>‘fishc’</strong> <strong>一样吗？</strong></p><p> 不一样，因为 Python 是一个“敏感的小女孩”，所以不要试图欺骗她，对 Python 来说，fishc 和 FishC 是完全不同的两个名字，所以编程的时候一定要当心。不过 Python 会帮助解决可能因此出现的问题，例如只有当标识符已经赋值后（还记得吗，小甲鱼在课堂中说过 Python 的变量是不用先声明的）才能在代码中使用，未赋值的标识符直接使用会导致运行时错误，所以你很快就可以根据经验发现此问题。</p><p> <strong>3.</strong> <strong>在小甲鱼看来，**</strong>Python** <strong>中什么是最重要的？你赞同吗？</strong></p><p> 缩进！在小甲鱼看来，缩进是 Python 的灵魂，缩进的严格要求使得 Python 的代码显得非常精简并且有层次（小甲鱼阅读过很多大牛的代码，那个乱……C语言不是有国际乱码大赛嘛……）。</p><p> 所以在 Python 里对待缩进代码要十分小心，如果没有正确地缩进，代码所做的事情可能和你的期望相去甚远（就像C语言里边括号打错了位置）。</p><p> 如果在正确的位置输入冒号“:”，IDLE 会自动将下一行缩进！</p><p> <strong>4.</strong> <strong>这节课的例子中出现了**</strong>“=”<strong><strong>和</strong></strong>“==”<strong><strong>，他们表示不同的含义，你在编程的过程中会不小心把</strong></strong>“==”<strong><strong>误写成</strong></strong>“=”<strong>**吗？有没有好的办法可以解决这个问题呢？</strong></p><p> C语言的话，如果 if( c == 1 ) 写成 if( c = 1 )，程序就完全不按程序员原本的目的去执行，但在 Python 这里，不好意思，行不通，语法错误！Python 不允许 if 条件中赋值，所以 if c = 1: 会报错！</p><p> 小甲鱼觉得这种做法可以非常有效的防止程序员因为打炮、熬夜等问题导致粗心的 BUG ，并且这类 BUG 杀伤力都巨大！</p><p> <strong>5.</strong> <strong>你听说过**</strong>“<strong><strong>拼接</strong></strong>”<strong>**这个词吗？</strong></p><p> 在一些编程语言，我们可以将两个字符串“相加”在一起，如：’I’ + ‘Love’ + ‘FishC’ 会得到 ‘ILoveFishC’，在 Python 里，这种做法叫做拼接字符串。</p><p><strong>0.</strong> <strong>编写程序：**</strong>hello.py<strong><strong>，要求用户输入姓名并打印</strong></strong>“<strong><strong>你好，姓名！</strong></strong>”**</p><p>\1. name = input(“请输入您的姓名：”)</p><p>\2. print(‘你好，’ + name + ‘!’)</p><p>复制代码</p><p> <strong>1.</strong> <strong>编写程序：**</strong>calc.py** <strong>要求用户输入**</strong>1<strong><strong>到</strong></strong>100<strong><strong>之间数字并判断，输入符合要求打印</strong></strong>“<strong><strong>你妹好漂亮</strong></strong>”<strong><strong>，不符合要求则打印</strong></strong>“<strong><strong>你大爷好丑</strong></strong>”**</p><p>\1. temp = input(“请输入1到100之间的数字：”)</p><p>\2. num = int(temp)</p><p>\3. if 1 &lt;= num &lt;= 100:</p><p>\4.   print(‘你妹好漂亮^_^’)</p><p>\5. else:</p><p>\6.   print(‘你大爷好丑T_T’)</p><p>复制代码</p><h1 id="2-第三节变量和字符串"><a href="#2-第三节变量和字符串" class="headerlink" title="2.第三节变量和字符串"></a>2.第三节变量和字符串</h1><p>teacher = ‘666’     \=赋值</p><p>变量赋值不能以数字开头</p><p>变量使用之前必须先赋值</p><p>大小写命名是不同的</p><p>字符串拼接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">myteacher =&apos;555&apos;</span><br><span class="line">yourteacher =&apos;666&apos;</span><br><span class="line">ourteacher =myteacher +yourteacher</span><br><span class="line">prinit(ourteacher)</span><br><span class="line">555666</span><br></pre></td></tr></table></figure><h2 id="2-1字符串"><a href="#2-1字符串" class="headerlink" title="2.1字符串"></a>2.1字符串</h2><p>字符串就是文本，文本和数字不一样，引号内的都是文本</p><p>创建字符串使用引号，单引双引都可以，成对就行</p><p>字符串中出现单引号双引号</p><p>1.使用转义符号（\）,对引号进行转义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;let\&apos;s go !!!&apos;</span><br></pre></td></tr></table></figure><p>2.方法二</p><p>打开路径时，反斜杠（\）会转义，用两个反斜杠，对自身进行转义</p><p>引入<strong>原始字符串</strong>，在前边加入r         *<em>注意，原始字符串结尾不能加\ *</em></p><p><code>str =r ‘C：\program\gggg’</code></p><p><strong>长字符串</strong></p><p>三重引号字符串</p><p>‘’‘</p><p>+好地方破口烘烤和判断</p><p>会尽快发货开盘后看看，</p><p>刚开始的空白</p><p>返回南方</p><p>符合</p><p>’‘’</p><p><strong>5.</strong> <strong>如果非要在原始字符串结尾输入反斜杠，可以如何灵活处理？</strong></p><p>\1. &gt;&gt;&gt;str = r’C:\Program Files\FishC\Good’’\‘</p><p>复制代码</p><h1 id="3-第四节"><a href="#3-第四节" class="headerlink" title="3.第四节"></a>3.第四节</h1><h2 id="3-1random模块"><a href="#3-1random模块" class="headerlink" title="3.1random模块"></a>3.1random模块</h2><p>randint()，返回一个随机的整数</p><p>randint(1,10)生成一个1-10的随机数</p><h2 id="3-2条件分支"><a href="#3-2条件分支" class="headerlink" title="3.2条件分支"></a>3.2条件分支</h2><p>！=            左边不等于右边</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if 条件：</span><br><span class="line">条件为真执行</span><br><span class="line">else：</span><br><span class="line">条件为假执行</span><br></pre></td></tr></table></figure><h2 id="3-3While循环"><a href="#3-3While循环" class="headerlink" title="3.3While循环"></a>3.3While循环</h2><p>while 条件：</p><p>条件为真执行操作</p><p>and逻辑操作符可以将任意表达式连接在一起</p><p>布尔类型：true\false</p><h2 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h2><p>逻辑操作符有个有趣的特性：在不需要求值的时候不进行操作。这么说可能比较“高深”，举个例子，表达式 x and y，需要 x 和 y 两个变量同时为真(True)的时候，结果才为真。因此，如果当 x 变量得知是假(False)的时候，表达式就会立刻返回 False，而不用去管 y 变量的值。</p><p> 这种行为被称为短路逻辑（short-circuit logic）或者惰性求值（lazy evaluation），这种行为同样也应用与 or 操作符，这个后边的课程小甲鱼会讲到，不急。</p><p> 实际上，Python 的做法是如果 x 为假，表达式会返回 x 的值(0)，否则它就会返回 y 的值（例子参考楼上那题）。</p><p> <strong>动动手答案：</strong></p><p><strong>本帖隐藏的内容</strong></p><p><strong>0.</strong> <strong>完善第二个改进要求（为用户提供三次机会尝试，机会用完或者用户猜中答案均退出循环）并改进视频中小甲鱼的代码。</strong></p><p> 需要注意的地方在代码中已经注释！</p><p>\1. import random</p><p>\2. times = 3</p><p>\3. secret = random.randint(1,10)</p><p>\4. print(‘——————我爱鱼C工作室——————‘)</p><p>\5. # 这里先给guess赋值（赋一个绝对不等于secret的值）</p><p>\6. guess = 0</p><p>\7. # print()默认是打印完字符串会自动添加一个换行符，end=” “参数告诉print()用空格代替换行</p><p>\8. # 嗯，小甲鱼觉得富有创意的你应该会尝试用 end=”JJ”？</p><p>\9. print(“不妨猜一下小甲鱼现在心里想的是哪个数字：”, end=” “)</p><p>\10. while (guess != secret) and (times &gt; 0):</p><p>\11.   temp = input()</p><p>\12.   guess = int(temp)</p><p>\13.   times = times - 1 # 用户每输入一次，可用机会就-1</p><p>\14.   if guess == secret:</p><p>\15.      print(“我草，你是小甲鱼心里的蛔虫吗？！”)</p><p>\16.      print(“哼，猜中了也没有奖励！”)</p><p>\17.   else:</p><p>\18.      if guess &gt; secret:</p><p>\19.        print(“哥，大了大了<del>~</del>“)</p><p>\20.      else:</p><p>\21.        print(“嘿，小了，小了<del>~</del>“)</p><p>\22.      if times &gt; 0:</p><p>\23.        print(“再试一次吧：”, end=” “)</p><p>\24.      else:</p><p>\25.        print(“机会用光咯T_T”)</p><p>\26. print(“游戏结束，不玩啦^_^”)</p><h1 id="4-Python数值类型"><a href="#4-Python数值类型" class="headerlink" title="4.Python数值类型"></a>4.Python数值类型</h1><p>整型：整数（长整型）</p><p>布尔类型：true\false</p><p>1,0</p><p>1+0=1</p><p>1*0=0</p><p>浮点型：小数</p><p>e记法（科学计数法）</p><p>1.55e10</p><p>=15500000000</p><h2 id="4-1类型转换"><a href="#4-1类型转换" class="headerlink" title="4.1类型转换"></a>4.1类型转换</h2><p>整数——-浮点数</p><p>整数——-字符串</p><p>整数———浮点数</p><p>int（）可以将浮点数、字符串转换为整数.（转换浮点数的时候，去掉小数）</p><p>float()可以将整数、字符串转换为浮点数</p><p>str()可以将数或任意其他类型转换为字符串</p><h2 id="4-2获取变量类型"><a href="#4-2获取变量类型" class="headerlink" title="4.2获取变量类型"></a>4.2获取变量类型</h2><p>type（）获取变量类型</p><p>isinstance(a,str)———-输出布尔类型</p><h2 id="4-3"><a href="#4-3" class="headerlink" title="4.3"></a>4.3</h2><p><strong>0. 在 Python 中，int 表示整型，那你还记得 bool、float 和 str 分别表示什么吗？</strong></p><p> bool 表示布尔类型<br> float 表示浮点型<br> str 表示字符串</p><p> <strong>1.</strong> <strong>你知道为什么布尔类型(bool)的 True 和 False 分别用 1 和 0 来代替吗？</strong></p><p> 你可能听说过计算机是很“笨”的，究其根本是因为它只认识二进制数，所以所有的编程语言最终都会转换成简单的二进制序列给CPU按照一定的规则解析。<br> 由于二进制只有两个数：0 和 1，因此用 0 和 1 来表示 False 和 True 再适合不过了，因为不用浪费资源在转换的过程上！</p><p> <strong>2.</strong> <strong>使用 int() 将小数转换为整数，结果是向上取整还是向下取整呢？</strong></p><p> 我们可爱的小甲鱼说了，小数取整会采用比较暴力的截断方式，即向下取整。（注：5.5向上取整为6，向下取整为5）</p><p> <strong>3.</strong> <strong>我们人类思维是习惯于“四舍五入”法，你有什么办法使得 int() 按照“四舍五入”的方式取整吗？</strong></p><p> int() 固然没那么“聪明”，但机器是死的，鱼油是活的！<br> 5.4 “四舍五入”结果为：5，int(5.4+0.5) == 5<br> 5.6 “四舍五入”结果为：6，int(5.6+0.5) == 6<br> 大家看明白了吗？</p><p> <strong>4.</strong> <strong>取得一个变量的类型，视频中介绍可以使用 type() 和 isinstance()，你更倾向于使用哪个？</strong></p><p> 建议使用 isinstance()，因为它的返回结果比较直接，另外 type() 其实并没有你想象的那么简单，我们后边会讲到。</p><p> <strong>5. Python3</strong> <strong>可以给变量命名中文名，知道为什么吗？</strong></p><p> Pyhton3 源码文件默认使用utf-8编码（支持中文），这就使得以下代码是合法的：<br> &gt;&gt;&gt; 小甲鱼 = ‘我爱你’<br> &gt;&gt;&gt; print(小甲鱼)<br> &gt;&gt;&gt; 我爱你</p><p> <strong>6.</strong> <strong>【该题针对零基础的鱼油】你觉得这个系列教学有难度吗？</strong></p><p> 如果有不懂的问题，请在此处提问：<a href="http://bbs.fishc.com/forum-173-1.html" target="_blank" rel="noopener">http://bbs.fishc.com/forum-173-1.html</a></p><p> 另外需要小甲鱼在视频讲解的方面做哪方面改进请回帖告之！</p><p> <strong>动动手答案：</strong></p><p><strong>本帖隐藏的内容</strong></p><p><strong>0.</strong> <strong>针对视频中小甲鱼提到的小漏洞，再次改进我们的小游戏：当用户输入错误类型的时候，及时提醒用户重新输入，防止程序崩溃。</strong></p><p> 需要注意的地方在代码中已经注释！</p><p>\1. import random</p><p>\2. times = 3</p><p>\3. secret = random.randint(1,10)</p><p>\4. print(‘——————我爱鱼C工作室——————‘)</p><p>\5. guess = 0</p><p>\6. print(“不妨猜一下小甲鱼现在心里想的是哪个数字：”, end=” “)</p><p>\7. while (guess != secret) and (times &gt; 0):</p><p>\8.   temp = input()</p><p>\9.   while not temp.isdigit():</p><p>\10.      temp = input(“抱歉，您的输入有误，请输入一个整数：”)</p><p>\11.   guess = int(temp)</p><p>\12.   times = times - 1 # 用户每输入一次，可用机会就-1</p><p>\13.   if guess == secret:</p><p>\14.      print(“我草，你是小甲鱼心里的蛔虫吗？！”)</p><p>\15.      print(“哼，猜中了也没有奖励！”)</p><p>\16.   else:</p><p>\17.      if guess &gt; secret:</p><p>\18.        print(“哥，大了大了<del>~</del>“)</p><p>\19.      else:</p><p>\20.        print(“嘿，小了，小了<del>~</del>“)</p><p>\21.      if times &gt; 0:</p><p>\22.        print(“再试一次吧：”, end=” “)</p><p>\23.      else:</p><p>\24.        print(“机会用光咯T_T”)</p><p>\25. print(“游戏结束，不玩啦^_^”)</p><p>复制代码</p><p>**</p><p>** <strong>1.</strong> <strong>写一个程序，判断给定年份是否为闰年。</strong></p><p>\1. temp = input(‘请输入一个年份：’)</p><p>\2. while not temp.isdigit():</p><p>\3.   temp = input(“抱歉，您的输入有误，请输入一个整数：”)</p><p>\4.  </p><p>\5. year = int(temp)</p><p>\6. if year/400 == int(year/400):</p><p>\7.   print(temp + ‘ 是闰年！’)</p><p>\8. else:</p><p>\9.   if (year/4 == int(year/4)) and (year/100 != int(year/100)):</p><p>\10.      print(temp + ‘ 是闰年！’)</p><p>\11.   else:</p><p>\12.      print(temp + ‘ 不是闰年！’)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Python是脚本语言&lt;/strong&gt;，脚本语言(Scripting language)是电脑编程语言，因此也能让开发者藉以编写出让电脑听命行事的程序。以简单的方式快速完成某些复杂的事情通常是创造脚本语言的重要原则，基于这项原则，使得脚本语言通常比 C语言、C++语言 或 Java 之类的系统编程语言要简单容易。&lt;/p&gt;
&lt;h1 id=&quot;0-第一节&quot;&gt;&lt;a href=&quot;#0-第一节&quot; class=&quot;headerlink&quot; title=&quot;0.第一节&quot;&gt;&lt;/a&gt;0.第一节&lt;/h1&gt;&lt;p&gt;Alt +N  上一条语句&lt;/p&gt;
&lt;p&gt;Alt+P     下一条语句&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Python学习" scheme="https://xufanz.github.io/tags/Python%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo+Github搭建自己的个人博客(纯小白)</title>
    <link href="https://xufanz.github.io/2019/10/20/my-first-blog/"/>
    <id>https://xufanz.github.io/2019/10/20/my-first-blog/</id>
    <published>2019-10-20T13:59:27.000Z</published>
    <updated>2019-10-27T07:19:30.514Z</updated>
    
    <content type="html"><![CDATA[<p>本人完全新手小白，用时两天通过看网上搭博客的帖子，趟了很多坑，因此记录一下自己搭成功以及在过程中出错的整个流程。</p><h1 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1.搭建环境"></a>1.搭建环境</h1><h2 id="1-安装Git工具"><a href="#1-安装Git工具" class="headerlink" title="1.安装Git工具"></a>1.安装Git工具</h2><p>在Git官网上找到相应版本安装，直接搜git就能出来官网；或者点此链接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a> 直接下载。</p><a id="more"></a><h2 id="2-安装-Node-js"><a href="#2-安装-Node-js" class="headerlink" title="2.安装 Node.js"></a>2.安装 Node.js</h2><p>一样的步骤，直接搜Node.js就可以搜到官网；或者点此链接<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a> 直接下载。安装过程中无脑下一步就行了（反正我是这样，好像也没出啥问题）</p><h1 id="2-用Hexo在本地搭建博客"><a href="#2-用Hexo在本地搭建博客" class="headerlink" title="2.用Hexo在本地搭建博客"></a>2.用Hexo在本地搭建博客</h1><p>本章主要介绍如何用HEXO在本地搭建个人博客以及如何更换博客主题。<em>（本章第三部分关于个人主题可以选择不换，直接跳到下一章）</em></p><h2 id="1-安装Hexo"><a href="#1-安装Hexo" class="headerlink" title="1.安装Hexo"></a>1.安装Hexo</h2><p>安装了git之后，桌面上或者应用程序中会出现Git GUI,Git CMD,Git Bash。<br><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/b7df012f57e9c257f7d8b46a4217960f290d0095/1.png?token=ALBJ4ARUNPBZ3BWJSBLSNTK5VVIDO" alt="jietu"></p><p>点开Git Bash,执行以下命令：<br><code>npm install -g hexo-cli</code><br>安装之后关掉Git Bash</p><h2 id="2-创建博客目录"><a href="#2-创建博客目录" class="headerlink" title="2.创建博客目录"></a>2.创建博客目录</h2><ul><li>接下来就要创建放置博客文件的文件夹： <code>xufanz.github.io</code>，<strong>注意，格式必须是<code>名称.github.io</code></strong> <em>名称不要乱起，好记的就行，这是将来的域名，也是Github的用户名，切记切记。</em>  例如我的是<code>E:\博客\xufanz.github.io</code></li><li>进入刚刚创建的文件夹，即<code>E:\博客\xufanz.github.io</code> 内，右击鼠标，选择git bush,依次输入：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo i</span><br><span class="line">npm install</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>  然后用浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，此时，我们的博客已经初步建成了。</li></ul><h2 id="3-主题切换"><a href="#3-主题切换" class="headerlink" title="3.主题切换"></a>3.主题切换</h2><p>github上有许许多多主题，我们以next主题为例。<br>在建立的文件夹，即<code>E:\博客\xufanz.github.io</code> 内，右击鼠标，选择git bush,输入：</p><pre><code>`git clone https://github.com/iissnan/hexo-theme-next themes/next`</code></pre><p>下载完成后，打开配置文件，（可以选择用记事本打开，也可以用Notepad++），配置文件就是文件夹<code>E:\博客\xufanz.github.io</code>内的<code>_config.yml</code> 文件，把landscape改为next。</p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/2.png" alt="tu"></p><p>Next主题有多种风格。</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><p>我们可以自主选择不同风格，打开<code>E:\博客\xufanz.github.io\theme\next</code>内的<code>_config.yml</code> 文件，找到如图所示的地方，选择不同风格。</p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/3.png" alt="tu"></p><p>在文件夹内打开git bash并依次输入：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>  重新用浏览器访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> ，此时，我们的博客主题已经完成更换了。</p><h1 id="3-部署本地文件到github"><a href="#3-部署本地文件到github" class="headerlink" title="3.部署本地文件到github"></a>3.部署本地文件到github</h1><h2 id="1-注册github"><a href="#1-注册github" class="headerlink" title="1.注册github"></a>1.注册github</h2><p>如果有的话直接进行下一步</p><p>没有直接点此链接进行注册<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br><strong>注册时注意，GitHub用户名需要与你的本地仓库文件夹名前缀一致</strong>，比如我的文件夹为<code>E:\博客\xufanz.github.io</code>则用户名最好设为 <strong>xufanz</strong></p><h2 id="2-建立远程仓库（配置Github）"><a href="#2-建立远程仓库（配置Github）" class="headerlink" title="2.建立远程仓库（配置Github）"></a>2.建立远程仓库（配置Github）</h2><p>在github上创建一个新项目</p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/4.png" alt="tu"></p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/5.png" alt="tu"></p><p>项目名与本地仓库文件夹名一致，注意！！！<strong>与你的github用户名也要一致</strong> 按图中的步骤建立出远程仓库后，点击settings。</p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/6.png" alt="tu"></p><p>一直往下滑，翻到如图所示地方，创建Page。</p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/7.png" alt="tu"></p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/8.png" alt="tu"></p><p>page创立后可以直接在浏览器输入<a href="https://xufanz.github.io/">https://xufanz.github.io/</a> 看是否创建成功。</p><h2 id="3-将本地文件部署到github上"><a href="#3-将本地文件部署到github上" class="headerlink" title="3.将本地文件部署到github上"></a>3.将本地文件部署到github上</h2><p>进入本地仓库根目录下，用编辑器打开<code>_config.yml</code>，下滑到最下方，修改deploy项，如下（根据你的github项目名进行相应更改）：</p><p><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/11.png" alt="tu"></p><p><strong>注意！！！冒号的后面一定一定一定要有一个空格！！</strong></p><p>部署上去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">//先装个插件压压惊</span><br><span class="line">hexo d  //  部署</span><br></pre></td></tr></table></figure><p>此时，我们的博客已经搭建起来，并发布到Github上了，在浏览器访问xufanz.github.io就能看到自己的博客了。</p><h1 id="4-后话"><a href="#4-后话" class="headerlink" title="4.后话"></a>4.后话</h1><ul><li>关于博客的书写，使用的是Markdown语法，markdown的软件也有很多，下载了几个之后，最终选择了atom，至于markdownpad装不上（我也不知道为啥）</li><li>还有一个是关于书写博客插图片的问题，网上的办法层出穷，在此推荐一种比较好理解的，以后有了更好的办法会重新发布。</li></ul><p><strong>插图方法</strong></p><p>利用github仓库，新建一个仓库<code>markdown-photo</code> ,将本地文件部署到github的仓库<code>markdown-photo</code>中，从仓库中选中上传的图片，右键能够复制图片地址，然后按照Markdown语法加入到博客中。切记新建仓库时不要选择私密仓库，不然博客的图片就出不来。<br><img src="https://raw.githubusercontent.com/xufanz/markdown-photo/master/3/66.png" alt="tu"></p><p><em>将文件上传到github的仓库maekdown-photo</em></p><p>在本地建立一个markdown-photo文件夹，并建立一个新文件夹1,（名字自己定，这里取1），将要上传的文件（不管是图片还是其他的文件）放入文件1内，然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br><span class="line">touch 1</span><br><span class="line">git add -A</span><br><span class="line">git commit -m &quot;add -A&quot;</span><br><span class="line">git push   //等一会就好了</span><br></pre></td></tr></table></figure><p>我的第一篇博客就这样完成了。2019/10/22/18：18</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本人完全新手小白，用时两天通过看网上搭博客的帖子，趟了很多坑，因此记录一下自己搭成功以及在过程中出错的整个流程。&lt;/p&gt;
&lt;h1 id=&quot;1-搭建环境&quot;&gt;&lt;a href=&quot;#1-搭建环境&quot; class=&quot;headerlink&quot; title=&quot;1.搭建环境&quot;&gt;&lt;/a&gt;1.搭建环境&lt;/h1&gt;&lt;h2 id=&quot;1-安装Git工具&quot;&gt;&lt;a href=&quot;#1-安装Git工具&quot; class=&quot;headerlink&quot; title=&quot;1.安装Git工具&quot;&gt;&lt;/a&gt;1.安装Git工具&lt;/h2&gt;&lt;p&gt;在Git官网上找到相应版本安装，直接搜git就能出来官网；或者点此链接&lt;a href=&quot;https://git-scm.com/downloads&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://git-scm.com/downloads&lt;/a&gt; 直接下载。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术贴" scheme="https://xufanz.github.io/categories/%E6%8A%80%E6%9C%AF%E8%B4%B4/"/>
    
    
      <category term="Hexo搭建blog" scheme="https://xufanz.github.io/tags/Hexo%E6%90%AD%E5%BB%BAblog/"/>
    
  </entry>
  
</feed>
